include(Max/ParseAddPackageExternals/ConfigureExternalSourceFile/FormatSnippet)

function(configure_external_source_file FILEPATH)
    cmake_path(RELATIVE_PATH FILEPATH BASE_DIRECTORY ${CMAKE_SOURCE_DIR} OUTPUT_VARIABLE RELATIVE_FILEPATH)
    message(STATUS "Configuring ${RELATIVE_FILEPATH}")
    file(READ ${FILEPATH} SOURCE_FILE)
    string(ASCII 255 SEMICOLON_ESCAPE)
    string(REPLACE ";" "${SEMICOLON_ESCAPE}" SOURCE_FILE "${SOURCE_FILE}")

    string(APPEND PREFIX_STRING "struct ${EXTERNAL_CPP_NAME} : object<${EXTERNAL_CPP_NAME}>")
    if(EXTERNAL_OPERATION_TYPE)
        string(APPEND PREFIX_STRING ", ${EXTERNAL_OPERATION_TYPE}_operator<")
        if(EXTERNAL_OPERATION_TYPE MATCHES sample)
            string(APPEND PREFIX_STRING "${EXTERNAL_OPERATION_INPUTS}, ${EXTERNAL_OPERATION_OUTPUTS}")
        endif()
        string(APPEND PREFIX_STRING ">")
    endif()
    string(APPEND PREFIX_STRING "\n{\n")
    
    list(PREPEND EXTERNAL_DESCRIPTION_ELEMENTS "${EXTERNAL_DIGEST}. ")
    foreach(ELEMENT IN LISTS EXTERNAL_DESCRIPTION_ELEMENTS)
        string(APPEND INFO_STRING "                            \"${ELEMENT}\"\n")
    endforeach()
    string(STRIP ${INFO_STRING} INFO_STRING)
    string(PREPEND INFO_STRING "    MIN_DESCRIPTION       { ")
    string(APPEND INFO_STRING " }${SEMICOLON_ESCAPE}\n")
    list(JOIN EXTERNAL_AUTHOR_ELEMENTS ", " AUTHOR_STRING)
    string(APPEND INFO_STRING "    MIN_AUTHOR            { \"${AUTHOR_STRING}\" }${SEMICOLON_ESCAPE}\n")
    unset(AUTHOR_STRING)
    list(JOIN EXTERNAL_TAGS ", " TAGS_STRING)
    string(APPEND INFO_STRING "    MIN_TAGS              { \"${TAGS_STRING}\" }${SEMICOLON_ESCAPE}\n")
    unset(TAGS_STRING)
    list(JOIN EXTERNAL_RELATED ", " RELATED_STRING)
    string(APPEND INFO_STRING "    MIN_RELATED           { \"${RELATED_STRING}\" }${SEMICOLON_ESCAPE}\n")
    unset(RELATED_STRING)
    
    foreach(INLET_INDEX RANGE ${EXTERNAL_INLET_MAX_INDEX})
        list(GET EXTERNAL_INLETS ${INLET_INDEX} INLET)
        string(JSON INLET_DESCRIPTION GET ${INLET} description)
        string(JSON INLET_TYPE GET ${INLET} type)
        unset(INLET)
        list(APPEND INLETS_STRING
            "    inlet<>  m_inlet_${INLET_INDEX}    { this, \"(${INLET_TYPE}) ${INLET_DESCRIPTION}\", \"${INLET_TYPE}\" }${SEMICOLON_ESCAPE}\n")
        unset(INLET_DESCRIPTION)
        unset(INLET_TYPE)
    endforeach()
    list(JOIN INLETS_STRING "" INLETS_STRING)

    foreach(OUTLET_INDEX RANGE ${EXTERNAL_OUTLET_MAX_INDEX})
        list(GET EXTERNAL_OUTLETS ${OUTLET_INDEX} OUTLET)
        string(JSON OUTLET_DESCRIPTION GET ${OUTLET} description)
        string(JSON OUTLET_TYPE GET ${OUTLET} type)
        unset(OUTLET)
        list(APPEND OUTLETS_STRING
            "    outlet<> m_outlet_${OUTLET_INDEX}   { this, \"(${OUTLET_TYPE}) ${OUTLET_DESCRIPTION}\", \"${OUTLET_TYPE}\" }${SEMICOLON_ESCAPE}\n")
        unset(OUTLET_DESCRIPTION)
        unset(OUTLET_TYPE)
    endforeach()
    list(JOIN OUTLETS_STRING "" OUTLETS_STRING)

    set(ATTRIBUTE_NAMES "name;type;visibility;category;order;setter;argument;message;label;description;default;min;max;enum_elements")
    foreach(ATTRIBUTE_INDEX RANGE ${EXTERNAL_ATTRIBUTE_MAX_INDEX})
        list(GET EXTERNAL_ATTRIBUTES ${ATTRIBUTE_INDEX} ATTRIBUTE)
        foreach(ATTRIBUTE_NAME IN LISTS ATTRIBUTE_NAMES)
            string(TOUPPER ${ATTRIBUTE_NAME} VAR_NAME)
            string(JSON ${VAR_NAME} ERROR_VARIABLE ERROR GET ${ATTRIBUTE} ${ATTRIBUTE_NAME})
            unset(ERROR)
            unset(VAR_NAME)
        endforeach()
        string(REPLACE "-" "_" CPP_NAME ${NAME})
        if(TYPE STREQUAL enum)
            string(JSON ENUM_COUNT LENGTH ${ENUM_ELEMENTS})
            math(EXPR ENUM_MAX_INDEX "${ENUM_COUNT} - 1")
            foreach(ENUM_INDEX RANGE ${ENUM_MAX_INDEX})
                string(JSON ENUM_NAME GET ${ENUM_ELEMENTS} ${ENUM_INDEX} name)
                string(JSON ENUM_LABEL GET ${ENUM_ELEMENTS} ${ENUM_INDEX} label)
                list(APPEND ENUM_NAMES ${ENUM_NAME})
                list(APPEND ENUM_LABELS ${ENUM_LABEL})
            endforeach()
            unset(ENUM_NAME)
            unset(ENUM_LABEL)
            
            set(ENUM_NAMES_PLUS_COUNT ${ENUM_NAMES})
            list(APPEND ENUM_NAMES_PLUS_COUNT enum_count)
            format_snippet(ENUM_NAMES_PLUS_COUNT ", " "enum struct ${CPP_NAME}_enum { " " }${SEMICOLON_ESCAPE}")
            unset(ENUM_NAMES_PLUS_COUNT)
            list(APPEND ATTRIBUTES_STRING ${FORMATTED_SNIPPET})

            format_snippet(ENUM_LABELS ", " "vector<string> const ${CPP_NAME}_names { " " }${SEMICOLON_ESCAPE}" "\"" "\"")
            list(APPEND ATTRIBUTES_STRING ${FORMATTED_SNIPPET})
            unset(ENUM_MAP_STRING)

            list(APPEND ATTRIBUTE_ELEMENTS "this")
            list(APPEND ATTRIBUTE_ELEMENTS "\"${NAME}\"")
            list(APPEND ATTRIBUTE_ELEMENTS "${CPP_NAME}_enum::${DEFAULT}")
            list(APPEND ATTRIBUTE_ELEMENTS "${CPP_NAME}_names")
            list(APPEND ATTRIBUTE_ELEMENTS "order { ${ORDER} }")
            list(APPEND ATTRIBUTE_ELEMENTS "title { \"${LABEL}\" }")
            list(APPEND ATTRIBUTE_ELEMENTS "description { \"${DESCRIPTION}\" }")
            list(APPEND ATTRIBUTE_ELEMENTS "setter { MIN_FUNCTION{ set_${CPP_NAME}(args[0])${SEMICOLON_ESCAPE} return { ${CPP_NAME}.get() }${SEMICOLON_ESCAPE} } }")
            format_snippet(ATTRIBUTE_ELEMENTS ", " "attribute<${CPP_NAME}_enum> ${CPP_NAME} { " " }${SEMICOLON_ESCAPE}")
            unset(ATTRIBUTE_ELEMENTS)
            list(APPEND ATTRIBUTES_STRING ${FORMATTED_SNIPPET})

            if(ARGUMENT)
                list(APPEND ARGUMENT_ELEMENTS "this")
                list(APPEND ARGUMENT_ELEMENTS "${NAME}.name()")
                list(APPEND ARGUMENT_ELEMENTS "\"sets the @${NAME} attribute\"")
                list(APPEND ARGUMENT_ELEMENTS "MIN_ARGUMENT_FUNCTION { ${NAME} = arg.a_w.w_sym${SEMICOLON_ESCAPE} }")
                format_snippet(ARGUMENT_ELEMENTS ", " "argument<symbol> ${NAME}_argument { " " }${SEMICOLON_ESCAPE}")
                unset(ARGUMENT_ELEMENTS)
                list(APPEND ATTRIBUTES_STRING ${FORMATTED_SNIPPET})
            endif()

            if(MESSAGE)
                list(APPEND MESSAGE_ELEMENTS "this")
                list(APPEND MESSAGE_ELEMENTS "\"anything\"")
                list(APPEND MESSAGE_ELEMENTS "\"sets the @${NAME} attribute\"")
                list(APPEND MESSAGE_ELEMENTS "MIN_FUNCTION { ${NAME} = args[0].a_w.w_sym${SEMICOLON_ESCAPE} return {}${SEMICOLON_ESCAPE} }")
                format_snippet(MESSAGE_ELEMENTS ", " "message<> anything_message { " " }${SEMICOLON_ESCAPE}")
                unset(MESSAGE_ELEMENTS)
                list(APPEND ATTRIBUTES_STRING ${FORMATTED_SNIPPET})
            endif()
        endif()
        if(TYPE STREQUAL number)
            list(APPEND ATTRIBUTE_ELEMENTS "this")
            list(APPEND ATTRIBUTE_ELEMENTS "\"${NAME}\"")
            list(APPEND ATTRIBUTE_ELEMENTS "${DEFAULT}")
            list(APPEND ATTRIBUTE_ELEMENTS "range { ${MIN}, ${MAX} }")
            list(APPEND ATTRIBUTE_ELEMENTS "order { ${ORDER} }")
            list(APPEND ATTRIBUTE_ELEMENTS "title { \"${LABEL}\" }")
            list(APPEND ATTRIBUTE_ELEMENTS "description { \"${DESCRIPTION}\" }")
            list(APPEND ATTRIBUTE_ELEMENTS "setter { MIN_FUNCTION{ set_${CPP_NAME}(args[0])${SEMICOLON_ESCAPE} return { ${CPP_NAME}.get() }${SEMICOLON_ESCAPE} } }")
            format_snippet(ATTRIBUTE_ELEMENTS ", " "          ${CPP_NAME} { " " }${SEMICOLON_ESCAPE}")
            unset(ATTRIBUTE_ELEMENTS)
            string(PREPEND FORMATTED_SNIPPET "    attribute<number, threadsafe::no, limit::clamp>\n")
            list(APPEND ATTRIBUTES_STRING ${FORMATTED_SNIPPET})

            if(ARGUMENT)
                list(APPEND ARGUMENT_ELEMENTS "this")
                list(APPEND ARGUMENT_ELEMENTS "${CPP_NAME}.name()")
                list(APPEND ARGUMENT_ELEMENTS "\"sets the @${NAME} attribute\"")
                list(APPEND ARGUMENT_ELEMENTS "MIN_ARGUMENT_FUNCTION { ${CPP_NAME} = arg${SEMICOLON_ESCAPE} }")
                format_snippet(ARGUMENT_ELEMENTS ", " "argument<symbol> ${CPP_NAME}_argument { " " }${SEMICOLON_ESCAPE}")
                unset(ARGUMENT_ELEMENTS)
                list(APPEND ATTRIBUTES_STRING ${FORMATTED_SNIPPET})
            endif()

            if(MESSAGE)
                list(APPEND MESSAGE_ELEMENTS "this")
                list(APPEND MESSAGE_ELEMENTS "\"number\"")
                list(APPEND MESSAGE_ELEMENTS "\"sets the @${NAME} attribute\"")
                list(APPEND MESSAGE_ELEMENTS "MIN_FUNCTION { ${CPP_NAME} = args[0]${SEMICOLON_ESCAPE} return {}${SEMICOLON_ESCAPE} }")
                format_snippet(MESSAGE_ELEMENTS ", " "message<> number_message { " " }${SEMICOLON_ESCAPE}")
                unset(MESSAGE_ELEMENTS)
                list(APPEND ATTRIBUTES_STRING ${FORMATTED_SNIPPET})
            endif()
        endif()
        if(TYPE STREQUAL int)
            list(APPEND ATTRIBUTE_ELEMENTS "this")
            list(APPEND ATTRIBUTE_ELEMENTS "\"${NAME}\"")
            list(APPEND ATTRIBUTE_ELEMENTS "${DEFAULT}")
            list(APPEND ATTRIBUTE_ELEMENTS "range { ${MIN}, ${MAX} }")
            list(APPEND ATTRIBUTE_ELEMENTS "order { ${ORDER} }")
            list(APPEND ATTRIBUTE_ELEMENTS "title { \"${LABEL}\" }")
            list(APPEND ATTRIBUTE_ELEMENTS "description { \"${DESCRIPTION}\" }")
            list(APPEND ATTRIBUTE_ELEMENTS "setter { MIN_FUNCTION{ set_${CPP_NAME}(args[0])${SEMICOLON_ESCAPE} return { ${CPP_NAME}.get() }${SEMICOLON_ESCAPE} } }")
            format_snippet(ATTRIBUTE_ELEMENTS ", " "          ${CPP_NAME} { " " }${SEMICOLON_ESCAPE}")
            unset(ATTRIBUTE_ELEMENTS)
            string(PREPEND FORMATTED_SNIPPET "    attribute<int, threadsafe::no, limit::clamp>\n")
            list(APPEND ATTRIBUTES_STRING ${FORMATTED_SNIPPET})

            if(ARGUMENT)
                list(APPEND ARGUMENT_ELEMENTS "this")
                list(APPEND ARGUMENT_ELEMENTS "${CPP_NAME}.name()")
                list(APPEND ARGUMENT_ELEMENTS "\"sets the @${NAME} attribute\"")
                list(APPEND ARGUMENT_ELEMENTS "MIN_ARGUMENT_FUNCTION { ${CPP_NAME} = arg${SEMICOLON_ESCAPE} }")
                format_snippet(ARGUMENT_ELEMENTS ", " "argument<symbol> ${CPP_NAME}_argument { " " }${SEMICOLON_ESCAPE}")
                unset(ARGUMENT_ELEMENTS)
                list(APPEND ATTRIBUTES_STRING ${FORMATTED_SNIPPET})
            endif()

            if(MESSAGE)
                list(APPEND MESSAGE_ELEMENTS "this")
                list(APPEND MESSAGE_ELEMENTS "\"number\"")
                list(APPEND MESSAGE_ELEMENTS "\"sets the @${NAME} attribute\"")
                list(APPEND MESSAGE_ELEMENTS "MIN_FUNCTION { ${CPP_NAME} = args[0]${SEMICOLON_ESCAPE} return {}${SEMICOLON_ESCAPE} }")
                format_snippet(MESSAGE_ELEMENTS ", " "message<> number_message { " " }${SEMICOLON_ESCAPE}")
                unset(MESSAGE_ELEMENTS)
                list(APPEND ATTRIBUTES_STRING ${FORMATTED_SNIPPET})
            endif()
        endif()
        foreach(ATTRIBUTE_NAME IN LISTS ATTRIBUTE_NAMES)
            string(TOUPPER ${ATTRIBUTE_NAME} VAR_NAME)
            unset(${VAR_NAME})
            unset(VAR_NAME)
        endforeach()
        unset(CPP_NAME)
        unset(ATTRIBUTE)
    endforeach()
    list(JOIN ATTRIBUTES_STRING "\n" ATTRIBUTES_STRING)

    if(EXTERNAL_OPERATION_TYPE)
        string(APPEND POSTFIX_STRING "    message<> dspsetup { this, \"dspsetup\", ")
        string(APPEND POSTFIX_STRING "MIN_FUNCTION { setup()${SEMICOLON_ESCAPE} return {}${SEMICOLON_ESCAPE} } }${SEMICOLON_ESCAPE}\n\n")
    endif()
    if(EXTERNAL_OPERATION_TYPE STREQUAL sample)
        string(APPEND POSTFIX_STRING "    inline ")
        if(EXTERNAL_OPERATION_OUTPUTS EQUAL 0)
            string(APPEND POSTFIX_STRING "void")
        elseif(EXTERNAL_OPERATION_OUTPUTS EQUAL 1)
            string(APPEND POSTFIX_STRING "sample")
        else()
            string(APPEND POSTFIX_STRING "samples<${EXTERNAL_OPERATION_INPUTS}>")
        endif()
        string(APPEND POSTFIX_STRING " operator()(")
        if(EXTERNAL_OPERATION_INPUTS GREATER 0)
            math(EXPR MAX "${EXTERNAL_OPERATION_INPUTS} - 1")
            foreach(INDEX RANGE ${MAX})
                list(APPEND ARGUMENTS_STRING sample)
            endforeach()
            unset(MAX)
            list(JOIN ARGUMENTS_STRING ", " ARGUMENTS_STRING)
            string(APPEND POSTFIX_STRING ${ARGUMENTS_STRING})
            unset(ARGUMENTS_STRING)
        endif()
        string(APPEND POSTFIX_STRING ") noexcept${SEMICOLON_ESCAPE}\n\n")
    elseif(EXTERNAL_OPERATION_TYPE STREQUAL vector)
        string(APPEND POSTFIX_STRING "    inline void operator()(audio_bundle, audio_bundle) noexcept${SEMICOLON_ESCAPE}\n\n")
    endif()
    string(APPEND POSTFIX_STRING "private:\n")
    if(EXTERNAL_ATTRIBUTES)
        foreach(ATTRIBUTE_INDEX RANGE ${EXTERNAL_ATTRIBUTE_MAX_INDEX})
            list(GET EXTERNAL_ATTRIBUTES ${ATTRIBUTE_INDEX} ATTRIBUTE)
            string(JSON NAME GET ${ATTRIBUTE} name)
            string(REPLACE "-" "_" NAME ${NAME})
            string(JSON TYPE GET ${ATTRIBUTE} type)
            if(TYPE STREQUAL enum)
                string(APPEND POSTFIX_STRING "    inline void set_${NAME}(${NAME}_enum const &) noexcept${SEMICOLON_ESCAPE}\n")
            else()
                string(APPEND POSTFIX_STRING "    inline void set_${NAME}(${TYPE} const &) noexcept${SEMICOLON_ESCAPE}\n")
            endif()
            unset(NAME)
            unset(TYPE)
        endforeach()
    endif()
    string(APPEND POSTFIX_STRING "    constexpr void setup() noexcept${SEMICOLON_ESCAPE}\n")
    
    string(APPEND HEADER_STRING ${PREFIX_STRING})
    string(APPEND HEADER_STRING ${INFO_STRING})
    string(APPEND HEADER_STRING "\n")
    string(APPEND HEADER_STRING ${INLETS_STRING})
    string(APPEND HEADER_STRING ${OUTLETS_STRING})
    string(APPEND HEADER_STRING "\n")
    string(APPEND HEADER_STRING ${ATTRIBUTES_STRING})
    if(ATTRIBUTES_STRING)
        string(APPEND HEADER_STRING "\n")
    endif()
    string(APPEND HEADER_STRING ${POSTFIX_STRING})
    unset(INFO_STRING)
    unset(INLETS_STRING)
    unset(OUTLETS_STRING)
    unset(ATTRIBUTES_STRING)
    unset(POSTFIX_STRING)
    
    set(BEGIN "BEGIN GENERATED BY CMAKE PARSING JSON")
    set(END "END GENERATED BY CMAKE PARSING JSON")
    string(REGEX REPLACE "${BEGIN}[^;]+${END}" "${BEGIN}  */\n\n${HEADER_STRING}\n/*  ${END}" SOURCE_FILE "${SOURCE_FILE}")
    unset(HEADER_STRING)
    
    string(REPLACE "${SEMICOLON_ESCAPE}" ";" SOURCE_FILE "${SOURCE_FILE}")
    file(WRITE ${FILEPATH} "${SOURCE_FILE}")
endfunction()
